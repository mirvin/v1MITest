Ideas 

for beginners, it makes sense to use a relational-like model.  For example

from Epic
- where 
  - ID: Epic:1161
  
"from" : "Epic",
  "where" : {
    "ID" : "Epic:1161"
  },
  


#Create single story
Scope: Root
AssetType: Story
Name: Special story

# Create mulitple stories
Scope: Root
AssetType: Story
Name: yStory-1
---
Scope: Root
AssetType: Story
Name: yStory-2

# Create mulitple types of assets
Scope: Root
AssetType: Story
Name: xStory-1
---
Scope: Root
AssetType: Defect
Name: xDefect-1

#Create multiple Stories and attach Tests and Tasks to each

Scope: Root
AssetType: Story
Name: Story-1
Children:
- AssetType: Test
  Name: Test-1 in Story-1
- AssetType: Task
  Name: Task-1 in Story-1
- AssetType: Test
  Name: Test-2 in Story-1
- AssetType: Task
  Name: Task-2 in Story-1
---
Scope: Root
AssetType: Story
Name: Story-2
Children:
- AssetType: Test
  Name: Test-1 in Story-2
- AssetType: Task
  Name: Task-1 in Story-2
- AssetType: Test
  Name: Test-2 in Story-2
- AssetType: Task
  Name: Task-2 in Story-2
---
Scope: Root
AssetType: Story
Name: Story-3
Children:
- AssetType: Test
  Name: Test-1 in Story-3
- AssetType: Task
  Name: Task-1 in Story-3
- AssetType: Test
  Name: Test-2 in Story-3
- AssetType: Task
  Name: Task-2 in Story-3
  
#Create Story and attach to existing Epic
from: Epic:4622
update:
 Subs:
  add:
   - AssetType: Story
     Name: MomyIsEpic   
   
#Create a new Story and use an existing Story then attach both to an Epic
from: Epic:4622
update:
 Subs:
  add:
   - AssetType: Story
     Name: Story-1
   - Story:1234
 
#Associate a Story to an Epic using a Subquery 
from: Epic:4622
update:
 Subs:
  add:
   from: Story
   filter:
   - ID='Story:1227' 
   
   
   ###########UPDATES#############################
   
   
   
  
